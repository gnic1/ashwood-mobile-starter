/* proxy/server.js — stable build (legacy + /v1 lobby) */
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");

const app = express();
app.use(cors());
app.use(bodyParser.json());

// request logger
app.use((req, res, next) => {
  const t0 = Date.now();
  res.on("finish", () => {
    const ms = Date.now() - t0;
    const ct = res.getHeader("content-type") || "";
    console.log("[proxy]", req.method, req.url, "->", res.statusCode, ct, ms + "ms");
  });
  next();
});

const PORT_PRIMARY = process.env.PORT || 8787;
const PORT_SECONDARY = 5051;

// -------- In-memory demo sessions --------
const SESSIONS = {
  "ASH-72QK": {
    code: "ASH-72QK",
    title: "The Founding of Ashwood & Co.",
    description:
      "Victorian England, 1888. You are summoned to Ashwood Hall for the reading of Ambrose Ashwood's will. The storm is not the only thing that's gathering...",
    gmName: "Ambrose_Ashwood",
    isEnhanced: true,
    background: "victorian-manor",
    logo: "🕯️",
    startsAt: null,
    claims: {} // { [charId]: { name: string } }
  }
};

// -------- Character roster for legacy screen --------
const CHARACTERS_BASE = [
  { id: "c1", name: "Evelyn Blackwood", role: "Historian", blurb: "Keeper of Ashwood's forgotten records.", buffs: [], debuffs: [] },
  { id: "c2", name: "Inspector Marlowe", role: "Detective", blurb: "A skeptic drawn by unsolved curiosities.", buffs: [], debuffs: [] },
  { id: "c3", name: "Sister Agnes", role: "Nun", blurb: "Whispers warn her: the house remembers.", buffs: [], debuffs: [] },
  { id: "c4", name: "Thomas Whitaker", role: "Barrister", blurb: "Executor of Ambrose's last will.", buffs: [], debuffs: [] }
];

/* ===== Legacy endpoints ===== */

// Validate session code — ALWAYS clear claims so first-open is clean
app.post("/session/validate", (req, res) => {
  const code = String((req.body && req.body.code) || "").toUpperCase();
  const sess = SESSIONS[code];
  if (!sess) return res.status(404).json({ ok: false, error: "Unknown session code" });
  // fresh
  sess.claims = {};
  res.json({
    ok: true,
    session: {
      code: sess.code,
      title: sess.title,
      gmName: sess.gmName,
      isEnhanced: sess.isEnhanced,
      background: sess.background,
      logo: sess.logo,
      description: sess.description,
      startsAt: sess.startsAt
    }
  });
});

// Basic session info
app.get("/session/:code", (req, res) => {
  const code = String(req.params.code || "").toUpperCase();
  const sess = SESSIONS[code];
  if (!sess) return res.status(404).json({ ok: false, error: "Unknown session" });
  res.json({
    ok: true,
    session: {
      code: sess.code,
      title: sess.title,
      description: sess.description,
      gmName: sess.gmName,
      isEnhanced: sess.isEnhanced,
      background: sess.background,
      logo: sess.logo,
      startsAt: sess.startsAt
    }
  });
});

// Character list — OMIT claimedBy when available; include when taken
app.get("/session/:code/characters", (req, res) => {
  const code = String(req.params.code || "").toUpperCase();
  const sess = SESSIONS[code];
  if (!sess) return res.status(404).json({ ok: false, error: "Unknown session" });

  const claims = (sess.claims && typeof sess.claims === "object") ? sess.claims : {};

  const characters = CHARACTERS_BASE.map(c => {
    const owner = claims[c.id] && claims[c.id].name ? String(claims[c.id].name) : null;
    if (owner) {
      return {
        id: c.id, name: c.name, role: c.role, blurb: c.blurb,
        buffs: c.buffs || [], debuffs: c.debuffs || [],
        claimedBy: owner,           // string
        available: false
      };
    } else {
      return {
        id: c.id, name: c.name, role: c.role, blurb: c.blurb,
        buffs: c.buffs || [], debuffs: c.debuffs || [],
        available: true             // no claimedBy field present
      };
    }
  });

  res.json({ ok: true, characters });
});

// Dev helper: reset claims
app.post("/session/:code/claims/reset", (req, res) => {
  const code = String(req.params.code || "").toUpperCase();
  const sess = SESSIONS[code];
  if (!sess) return res.status(404).json({ ok: false, error: "Unknown session" });
  sess.claims = {};
  res.json({ ok: true });
});

/* ===== Lobby engine (/v1) ===== */
const { register: registerLobby } = require("./lobby");
registerLobby(app, "/v1");

/* ===== 404 JSON ===== */
/* ===== Legacy claim endpoints (both forms supported) =====
   A) POST /session/:code/claim           body: { characterId, name }
   B) POST /session/:code/characters/:id/claim   body: { name }
*/
function claimCharacter(sess, charId, name) {
  const id = String(charId || "").trim();
  if (!id) return { ok:false, status:400, error:"Missing characterId" };
  const exists = (CHARACTERS_BASE || []).some(c => c.id === id);
  if (!exists) return { ok:false, status:404, error:"Unknown character" };
  if (!sess.claims || typeof sess.claims !== "object") sess.claims = {};
  if (sess.claims[id] && sess.claims[id].name) return { ok:false, status:409, error:"Character already claimed" };
  sess.claims[id] = { name: String(name || "Player") };
  return { ok:true };
}

// A) POST /session/:code/claim
app.post("/session/:code/claim", (req, res) => {
  const code = String(req.params.code || "").toUpperCase();
  const sess = SESSIONS[code];
  if (!sess) return res.status(404).json({ ok:false, error:"Unknown session" });

  const characterId = req.body && (req.body.characterId || req.body.id);
  const name = req.body && req.body.name;
  const r = claimCharacter(sess, characterId, name);
  if (!r.ok) return res.status(r.status).json({ ok:false, error:r.error });

  return res.json({ ok:true });
});

// B) POST /session/:code/characters/:id/claim
app.post("/session/:code/characters/:id/claim", (req, res) => {
  const code = String(req.params.code || "").toUpperCase();
  const sess = SESSIONS[code];
  if (!sess) return res.status(404).json({ ok:false, error:"Unknown session" });

  const characterId = req.params.id;
  const name = req.body && req.body.name;
  const r = claimCharacter(sess, characterId, name);
  if (!r.ok) return res.status(r.status).json({ ok:false, error:r.error });

  return res.json({ ok:true });
});
app.use((req, res) => {
  res.status(404).json({ ok: false, error: "Not found" });
});

/* ===== Listeners ===== */
app.listen(PORT_PRIMARY, () => {
  console.log("[Ashwood] Lobby endpoints mounted at /v1");
  console.log(`Ashwood proxy listening on http://localhost:${PORT_PRIMARY}`);
});
app.listen(PORT_SECONDARY, () => {
  console.log(`Ashwood proxy also listening on http://localhost:${PORT_SECONDARY}`);
});

